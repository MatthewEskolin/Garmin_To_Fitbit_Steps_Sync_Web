<!-- Contains COOKBOOK Items that were discovered while working on this project -->
<!-- COOKBOOK - helpful to debug Model Properties --> 
<!-- 
<table class="table table-dark">
    <thead>
        <tr><td>Var</td><td>Value</td></tr>
    </thead>
    <tbody>
        @foreach(var property in ViewData.ModelMetadata.Properties)
        {
            <tr>
                <td>@Html.Label(property.Name,property.GetDisplayName(), new{ @class = "control-label col-md-2"})</td>
                <td>@Html.Display(property.PropertyName, new{ htmlAttributes = new{ @class = "form-control col-md-2"} })</td>
            </tr>
        }
    </tbody>
</table>
-->
<!-- End Cookbook -->


@* Move to Bootstrap Cookbook! *@
@* {

<div class="container">
  <div class="row">
    <div class="col-sm">
        System Message
    </div>
    <div class="col-sm">
      One of three columns
    </div>
    <div class="col-sm">
            <span class="@spnClass">@Model.ConnectionState</span>
    </div>
  </div>
</div> 
} *@
@* End Cookbook*@






@* Possible Move to a Tag Helpers LIbrary 
from https://scottsauber.com/2017/01/02/custom-tag-helper-toggling-visibility-on-existing-html-elements/*@


@*
    // Add more target elements here on a new line if you want to target more than just div.  Example: [HtmlTargetElement("a")] to hide/show links
    [HtmlTargetElement("div")]
    public class VisibilityTagHelper : TagHelper
    {
        // default to true otherwise all existing target elements will not be shown, because bool's default to false
        public bool IsVisible { get; set; } = true;

        // You only need one of these Process methods, but just showing the sync and async versions
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            if (!IsVisible)
                output.SuppressOutput();

            base.Process(context, output);
        }

        public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output)
        {
            if (!IsVisible)
                output.SuppressOutput();

            return base.ProcessAsync(context, output);
        }
    }



*@